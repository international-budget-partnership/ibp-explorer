import _ from "underscore";

import template_page from "../templates/page/calculator.hbs";
import template_profile_percentages from "../templates/profile_percentages.hbs";
import template_profile_details from "../templates/profile_details.hbs";
import template_calculator_details_future from "../templates/calculator_details_future.hbs";
import template_calculator_details_future_print from "../templates/calculator_details_future_print.hbs";
import template_calculator_details_future_print_table from "../templates/calculator_details_future_print_table.hbs";
import template_question_text from "../templates/question_text.hbs";
import template_calculator_badges from "../templates/calculator_badges.hbs";

import reportGenerator from "../reportgenerator.js";
import * as util from "../../util.js";

class CalculatorPage extends Backbone.View {
  initialize(alpha2, params) {
    this._animationHackScale = _.bind(this._animationHackScale, this);
    this._repaintFutureScore = _.bind(this._repaintFutureScore, this);
    this._onClickAnswer = _.bind(this._onClickAnswer, this);
    this._repaint = _.bind(this._repaint, this);
    this._setupYears = _.bind(this._setupYears, this);
    this._onClickReset = _.bind(this._onClickReset, this);
    this._clickCalculatorGroupToggle = _.bind(this._clickCalculatorGroupToggle, this);
    this.renderPage = _.bind(this.renderPage, this);
    this.initialize = _.bind(this.initialize, this);
    this.alpha2 = alpha2 || "";
    this.year = _EXPLORER_DATASET.THIS_YEAR;
    this.years = [parseInt(_EXPLORER_DATASET.THIS_YEAR)];
    this.calc_year = (parseInt(_EXPLORER_DATASET.THIS_YEAR) + 2).toString();
    this.countries = _EXPLORER_DATASET.forYear(this.year).country;
    this.data = this.lookup(this.alpha2);
    this.params = this._decodeParams(params);
    this.db = $.extend({}, this.data[`db_${this.year}`], this.params);
    // `initialize` gets called when the country dropdown is changed (page is
    // rerendered), so we want to unbind here, incase this has been bound
    // before, to prevent unnecessary _repaints.
    reportGenerator.unbind("update");
    reportGenerator.bind("update", this._repaint);
  }

  _decodeParams(queryString) {
    const params = {};
    let tmpObj;
    if (queryString) {
      _.each(
        _.map(decodeURI(queryString).split(/&/g), (el, i) => {
          const aux = el.split("=");
          let val;
          tmpObj = {};
          if (aux.length >= 1) {
            if (aux.length === 2) {
              if (_.contains(["100", "67", "33", "0", "-1"], aux[1])) {
                val = parseInt(aux[1]);
              } else {
                return;
              }
            }
            tmpObj[aux[0]] = val;
          }
          return tmpObj;
        }),
        function (tmpObj) {
          if (tmpObj) {
            _.extend(params, tmpObj);
          }
        }
      );
    }
    return params;
  }

  _encodeParams(paramsObj) {
    let paramsStr = "";
    _.forEach(paramsObj, (val, key) => {
      if (val) {
        paramsStr = `${paramsStr}${key}=${val}&`;
      }
    });
    return paramsStr.slice(0, -1);
  }

  lookup(alpha2) {
    /*
    Look up a country object by alpha2 code.
    */
    return _.find(this.countries, (x) => x.alpha2 === alpha2) || {};
  }

  renderPage(target) {
    // $(window).scrollTop(0)
    $(".page-title").html("Calculator");
    $(".page-description").html("What does shaping an equitable future look like? Interact with our data from the Open Budget Survey to see how to improve budget accountability in your country.");

    $("[slot=infobox]")
      .html(
        `<p>Use the 2023 calculator to predict the outcome of the next survey and see how your country can improve:</p>
      <ul>
        <li class="d-flex">
          <div class="block-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 98 66"><path d="M28.257 1.077c-5.652.822-11.165 3.244-15.699 6.899-1.564 1.26-4.394 4.187-5.556 5.744C2.191 20.17-.13 28.429.66 36.284 2.2 51.589 13.948 63.597 29.232 65.489c1.781.22 5.746.22 7.522-.001 3.844-.478 7.311-1.515 10.735-3.211L49 61.529l1.511.748c4.672 2.315 9.249 3.383 14.496 3.383 3.856 0 6.668-.463 10.413-1.714 10.216-3.414 18.25-11.976 20.944-22.323 1.672-6.42 1.479-12.509-.591-18.739-1.549-4.659-3.909-8.534-7.407-12.16-2.647-2.745-5.023-4.546-8.209-6.225C75.298 1.938 70.652.814 64.96.82c-5.258.005-9.376.921-13.959 3.104L49 4.878l-2.001-.954c-3.143-1.497-6.054-2.374-9.514-2.868-2.063-.295-7.136-.283-9.228.021m8.497.891c3.533.437 7.094 1.495 10.085 2.995.995.499 1.856.983 1.913 1.075.194.315 1.034.195 1.148-.163.139-.439 2.462-1.598 4.858-2.424 3.331-1.149 6.463-1.654 10.249-1.654 7.047 0 13.261 2.065 18.946 6.296 8.444 6.284 13.203 16.775 12.407 27.35-.569 7.562-3.527 14.197-8.729 19.577-4.291 4.439-9.127 7.245-15.092 8.757-4.779 1.211-10.426 1.188-15.32-.063-3.17-.811-6.842-2.371-7.249-3.081-.284-.495-1.049-.656-1.203-.252-.114.296-3.285 1.81-5.209 2.485-3.368 1.183-5.892 1.647-9.585 1.761-9.114.283-17.241-3.024-23.604-9.607-4.626-4.785-7.421-10.419-8.495-17.127-.365-2.277-.371-6.968-.011-9.31.906-5.901 3.322-11.197 7.236-15.863C13.9 6.998 21.392 2.969 29.08 1.975c1.549-.201 6.078-.205 7.674-.007m8.753 5.434c-.412.33-.447.422-.28.734.235.439.471.444.98.02.354-.295.371-.366.177-.73-.264-.493-.29-.493-.877-.024m6.72.036c-.279.372-.274.388.242.792l.527.413.377-.355.377-.355-.374-.296c-.732-.58-.849-.6-1.149-.199m-9.978 2.66c-.436.455-.438.466-.126.748.241.219.391.247.629.119.588-.314.708-.583.436-.972-.322-.459-.407-.45-.939.105m13.208.07c-.246.35-.233.388.277.808.528.435.538.437.854.125.316-.312.315-.319-.154-.808-.565-.59-.643-.6-.977-.125m-16.075 2.994c-.428.544-.428.591.003.86.311.194.396.171.774-.207.342-.342.391-.481.247-.709-.279-.443-.647-.423-1.024.056m19.008.07c-.288.319-.286.341.097.776.217.246.407.471.421.501.015.03.215-.07.445-.22l.419-.275-.424-.555c-.494-.648-.562-.665-.958-.227m-21.313 3.302c-.403.661-.404.727-.011.937.483.258.582.214.87-.39.261-.547.258-.564-.133-.82-.388-.254-.41-.246-.726.273m23.869.103c-.373.287-.377.313-.118.813.287.556.432.61.923.347.312-.166.312-.178-.014-.816-.182-.356-.347-.646-.368-.644-.02.002-.211.137-.423.3M35.11 20.518c-.159.481-.153.617.028.732.441.279.731.142.944-.445.178-.494.177-.615-.008-.733-.459-.29-.768-.147-.964.446m27.647-.095c-.361.145-.364.166-.117.757.315.755.246.711.76.487.431-.187.433-.195.187-.801-.268-.661-.276-.665-.83-.443m-28.945 3.826c-.274.721-.205 1.022.255 1.11.333.064.451-.002.571-.318.194-.51.195-1.031.002-1.031-.082 0-.265-.044-.406-.098-.176-.068-.308.038-.422.337m30.135.248c-.191.309.103 1.31.384 1.307.546-.005.724-.261.608-.878-.09-.482-.182-.589-.502-.589-.215 0-.436.072-.49.16m-31.018 3.855c-.228.595-.105 1.04.317 1.146.511.128.501.139.641-.711.114-.687.11-.694-.372-.694-.293 0-.526.103-.586.259m32.037.181c-.298.077-.351.364-.183.99.073.273.219.367.569.367.502 0 .541-.101.369-.96-.1-.502-.185-.546-.755-.397m-32.463 4.46c0 .638.014.654.572.654.558 0 .572-.016.572-.654 0-.637-.014-.653-.572-.653-.558 0-.572.016-.572.653m32.504.409c0 .707.018.735.49.735s.49-.028.49-.735c0-.708-.018-.735-.49-.735s-.49.027-.49.735m-31.936 3.132c-.279.055-.32.167-.268.721.06.626.086.654.576.607.282-.028.494-.105.472-.173-.023-.067-.041-.38-.041-.694 0-.575-.04-.601-.739-.461m31.609 1.03c0 .56.057.664.416.754.508.128.494.143.625-.71l.106-.695h-.573c-.56 0-.574.016-.574.651m-30.625 3.075c-.513.099-.577.243-.397.895.153.554.208.599.609.502.243-.058.459-.119.48-.135.022-.016-.052-.321-.163-.677-.16-.514-.27-.635-.529-.585m29.824.948c-.129.468-.122.651.029.747.45.286.758.129.923-.471.193-.699.217-.645-.344-.786-.399-.1-.452-.056-.608.51m-28.803 3.116c-.348.091-.354.224-.046.962.221.528.271.559.613.381.204-.106.397-.215.428-.241.031-.026-.039-.31-.155-.631-.209-.577-.281-.618-.84-.471m27.433.826c-.235.585-.23.622.105.811.193.109.393.201.443.204.103.007.684-1.155.609-1.217-.104-.086-.766-.41-.836-.41-.041 0-.186.275-.321.612m-25.555 3.022c-.202.095-.367.237-.367.316 0 .115.317.695.598 1.094.025.035.232-.059.461-.209.431-.283.415-.451-.108-1.103-.171-.213-.294-.233-.584-.098m23.705.713c-.302.567-.302.58.013.811.41.303.524.257.923-.374l.328-.519-.478-.247c-.472-.244-.482-.241-.786.329m-21.432 2.85-.381.309.351.493c.402.564.66.616 1.024.208.234-.262.219-.329-.178-.802-.433-.515-.436-.516-.816-.208m19.101.501-.391.494.362.355.361.354.47-.555.469-.555-.384-.302c-.212-.167-.41-.299-.441-.294-.031.005-.231.232-.446.503M41.922 55.34c-.251.278-.234.33.286.834l.555.537.293-.447c.292-.445.291-.449-.189-.833-.58-.464-.605-.467-.945-.091m13.617.269c-.367.39-.369.415-.093.837l.285.435.504-.504c.494-.494.498-.511.203-.837-.383-.423-.441-.419-.899.069m-10.38 2.54c-.288.319-.288.337.016.575.714.559.901.607 1.138.293.316-.416.299-.477-.237-.859-.579-.413-.551-.412-.917-.009m7.315.034c-.615.433-.613.423-.242.906l.285.37.545-.455c.539-.45.541-.458.242-.823l-.302-.369-.528.371" fill-rule="evenodd"/></svg></div>
          <div class="block-label">Transparency</div>
        </li>
        <li class="d-flex">
          <div class="block-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 78 73"><path d="M36.205.978c-3.739.484-7.591 1.958-10.725 4.104-1.693 1.159-2.66 1.991-4.294 3.693-3.909 4.071-6.29 9.365-6.825 15.171l-.08.87-.717.404c-1.617.913-3.782 2.612-5.33 4.182-1.846 1.873-1.909 1.948-3.148 3.786C2.647 36.803 1.19 41.154.895 45.695c-.237 3.653.263 6.967 1.614 10.683 1.639 4.513 5.578 9.418 9.667 12.039 3.734 2.393 6.943 3.539 11.538 4.122 4.482.567 10.324-.597 14.493-2.89l.963-.529 1.117.597c1.449.773 3.903 1.73 5.444 2.12.67.17 2.077.434 3.126.587 6.35.922 13.286-.893 18.585-4.864 2.437-1.825 5.26-5.02 6.702-7.583 1.677-2.983 2.662-5.86 3.152-9.212.59-4.029.037-8.847-1.449-12.637-1.952-4.977-5.315-9.138-9.821-12.153l-.989-.661-.079-1.315c-.211-3.485-1.587-7.774-3.489-10.874-1.18-1.922-1.856-2.814-3.352-4.42C54.225 4.527 48.651 1.676 43.01.978c-1.896-.235-4.993-.235-6.805 0M44.07 2.07c1.949.395 3.042.709 4.549 1.31 4.846 1.93 8.746 5.137 11.667 9.592 1.348 2.055 2.733 5.382 3.286 7.889.211.96.518 3.406.518 4.132 0 .349.061.747.135.886.092.173.092.251 0 .251-.077 0-.135.309-.135.715v.715h.455c.445 0 .455-.012.455-.523v-.524l.404.209c1.35.698 4.331 3.38 5.78 5.2 2.292 2.879 3.878 6.105 4.79 9.743.534 2.133.768 6.536.463 8.71-.628 4.474-2.454 8.772-5.163 12.155-.973 1.215-2.9 3.093-4.197 4.089-3.667 2.816-7.612 4.408-12.282 4.957-1.713.201-4.067.194-5.525-.017-1.651-.239-2.433-.395-3.64-.729-1.784-.493-2.428-.747-4.627-1.825l-1.833-.899-1.846.921c-2.866 1.431-5.314 2.167-8.464 2.543-1.735.208-4.199.21-5.46.006-.179-.029-.617-.09-.975-.136-1.013-.13-3.661-.83-4.81-1.272-6.215-2.39-11.209-7.15-13.813-13.163-1.418-3.275-1.998-6.088-2.012-9.75-.015-3.963.822-7.502 2.596-10.969 1.229-2.402 2.342-3.98 4.34-6.147 1.163-1.262 3.423-2.999 5.23-4.019 1.203-.679 1.249-.722 1.252-1.16.002-.25.093-1.128.201-1.95 1.396-10.584 9.399-19.014 19.86-20.921 2.125-.387 2.015-.379 4.836-.335 2.01.031 2.91.103 3.965.316M25.74 22.295v.455h1.43v-.91h-1.43v.455m26 0v.455h.635c.548 0 .645-.04.713-.293.154-.575.112-.617-.633-.617h-.715v.455m-29.445-.13c-.072.024-.347.08-.613.124-.463.078-.48.099-.404.499.044.229.092.433.107.452.015.02.328-.029.696-.108.676-.145.729-.211.587-.739-.077-.29-.119-.315-.373-.228m25.74.021c-.143.03-.392.082-.552.117-.294.062-.374.346-.214.76.052.137.183.184.39.141 1.028-.211.979-.18.936-.611-.042-.429-.134-.496-.56-.407m-17.745.279c0 .145-.032.346-.07.447-.052.135.114.216.638.311l.709.129.078-.391c.098-.49.023-.559-.737-.67-.564-.083-.618-.068-.618.174m25.963-.155c-.051.051-.093.251-.093.444 0 .318.062.364.644.479.523.103.657.092.715-.059.102-.266.088-.659-.027-.726-.205-.122-1.15-.227-1.239-.138m-38.702 1.075c-.63.234-.761.465-.48.849.172.236.197.236.786.011.519-.198.596-.273.525-.506-.171-.562-.218-.582-.831-.354m25.912-.005c-.706.281-.731.314-.543.726.167.367.293.375 1.093.071.293-.112.331-.183.256-.486-.128-.519-.207-.549-.806-.311m-8.865.415c-.126.36-.109.407.182.52 1.062.415.969.418 1.161-.038l.177-.422-.542-.22c-.745-.303-.821-.291-.978.16m25.934-.102c-.134.501-.096.571.406.735.268.087.553.187.633.221.08.034.176-.043.213-.171.036-.128.105-.326.152-.44.066-.158-.05-.26-.477-.423-.734-.28-.833-.272-.927.078M39.48 25.235c-.13.075-.311.108-.402.073-.147-.056-.693.651-.578.749.025.021.293.192.595.381l.551.343.332-.503c.291-.439.313-.545.177-.845-.169-.37-.309-.411-.675-.198m-25.18 2v.715h.91v-1.43h-.91v.715m21.27.782c-.495.437-.501.452-.289.774.118.181.258.328.309.327.052-.001.322-.194.599-.428l.504-.427-.309-.346-.309-.347-.505.447m6.765.27-.239.329.499.438.5.437.325-.324.325-.324-.52-.445c-.286-.244-.549-.443-.585-.442-.036.001-.173.15-.305.331m21.316 2.778c-.044.276-.114.59-.155.696-.098.256.707.457.856.215.105-.169.294-1.18.23-1.23-.02-.016-.22-.063-.444-.106-.39-.074-.41-.056-.487.425m-31.293.28-.423.535.315.242c.173.133.349.244.391.245.041.002.258-.224.48-.501l.405-.504-.294-.276c-.161-.152-.329-.276-.372-.276-.043 0-.269.241-.502.535m-17.39-.289c-.125.08-.152.257-.091.618.122.718.203.8.668.676l.401-.106-.134-.652c-.108-.529-.184-.652-.4-.65a.993.993 0 0 0-.444.114m30.564.361c-.377.264-.363.403.096.94.371.433.385.437.71.224.183-.119.332-.264.332-.322 0-.058-.19-.318-.422-.577-.404-.449-.436-.461-.716-.265m-15.685 3.685-.347.636.407.211c.224.115.424.191.444.168.101-.115.602-1.176.566-1.199l-.383-.24-.341-.212-.346.636m32.455.371-.263.633.426.203.427.203.256-.673.256-.674-.387-.162a4.425 4.425 0 0 0-.42-.163c-.018 0-.151.285-.295.633m-14.31-.264-.302.232.29.598.29.598.427-.204.427-.203-.319-.63c-.176-.347-.362-.629-.415-.627-.052.001-.231.108-.398.236m-31.515.071c-.196.072-.357.205-.357.296 0 .127.311.912.472 1.191.013.023.205-.051.426-.166.399-.206.401-.212.214-.658-.323-.774-.36-.806-.755-.663m11.54 4.015c-.108.362-.175.68-.149.706.026.026.223.098.438.159.375.108.398.091.547-.407.085-.286.183-.591.216-.678.036-.093-.128-.216-.398-.299l-.458-.141-.196.66m32.214.108-.352.532.318.245c.175.134.354.246.398.247.1.004.765-.99.765-1.143 0-.096-.552-.414-.719-.414-.032 0-.216.24-.41.533m-41.806-.067-.36.195.399.579c.219.319.44.579.49.577.05-.001.221-.104.38-.227l.289-.225-.354-.552c-.195-.303-.383-.549-.419-.547-.036.002-.227.092-.425.2m31.356-.038c-.333.156-.334.161-.151.788.177.611.197.629.585.552.22-.045.426-.106.456-.136.08-.079-.365-1.373-.469-1.366-.048.003-.237.076-.421.162m7.77 3.576-.485.497.331.311.331.311.481-.481.481-.481-.327-.327-.327-.327-.485.497m-36.336.029c-.341.28-.28.496.292 1.03l.34.319.323-.323.323-.323-.489-.474c-.488-.473-.49-.474-.789-.229m5.778.831c-.082.693.013.85.517.854.218.002.293-.1.357-.486.14-.848.117-.91-.357-.965-.44-.051-.44-.051-.517.597m23.812-.092c-.341.052-.349.073-.275.728.042.371.093.695.114.72.021.025.217.005.437-.043.304-.067.399-.159.399-.386 0-.441-.15-1.114-.244-1.092a8.546 8.546 0 0 1-.431.073m3.47 2.132c-.539.411-.573.547-.233.925.189.209.236.198.762-.179l.56-.402-.277-.374a6.527 6.527 0 0 0-.284-.37c-.004.002-.242.182-.528.4m-29.763.145c-.283.405-.268.444.334.842l.535.354.245-.302c.134-.166.243-.339.241-.385-.003-.088-.966-.798-1.083-.798-.038 0-.16.13-.272.289M50.7 47.642c0 .226-.116.381-.39.523-.214.111-.39.221-.39.244 0 .023.064.225.142.448l.141.406.503-.256c.277-.141.594-.257.704-.257.156 0 .2-.158.2-.715v-.715h-.455c-.397 0-.455.041-.455.322m-23.757.024c-.101.041-.163.323-.163.744v.678l.455-.053.455-.053v-.701c0-.643-.024-.7-.292-.691a1.7 1.7 0 0 0-.455.076m1.334.691-.2.387.656.332.656.333.18-.427.181-.427-.542-.287c-.697-.368-.695-.368-.931.089m17.959 1.345c-.464.13-.493.166-.421.527.043.213.105.414.138.447.048.048 1.211-.214 1.335-.301.018-.012-.031-.208-.11-.434-.154-.442-.186-.45-.942-.239m-13.774.315c-.037.196-.045.394-.017.439.056.091 1.236.409 1.291.347.018-.021.073-.22.12-.443.084-.393.069-.41-.497-.553-.797-.201-.819-.196-.897.21m4.42.866c-.034.221-.04.425-.014.453.025.029.332.079.682.113l.636.061.067-.438c.036-.24.058-.444.049-.453a9.535 9.535 0 0 0-.688-.077c-.666-.061-.671-.059-.732.341m4.881-.349c-.367.046-.423.102-.423.427 0 .483.134.554.845.447.561-.084.585-.106.585-.528 0-.474.006-.472-1.007-.346m8.505 1.42c-.172.605-.224 1.066-.128 1.121.058.032.258.096.446.14.323.077.347.047.475-.599.075-.375.122-.695.105-.712-.016-.017-.21-.067-.43-.111-.319-.064-.414-.032-.468.161m-22.624.151c-.363.044-.369.057-.282.652.11.752.179.826.672.728l.393-.079-.141-.627c-.078-.345-.17-.648-.206-.674-.036-.025-.232-.025-.436 0m21.204 4.479c-.126.305-.228.591-.228.637 0 .082.801.402.845.337.012-.018.124-.294.249-.613.215-.552.215-.587-.004-.747-.399-.291-.626-.19-.862.386m-20.01-.146-.347.127.267.642c.146.354.321.643.388.643.1 0 .598-.222.723-.323.068-.054-.503-1.237-.593-1.227-.05.006-.247.068-.438.138m17.977 4.055-.391.568.375.278.376.278.249-.356c.549-.785.562-.875.156-1.115l-.374-.221-.391.568m-15.842-.085c-.371.258-.367.326.048.952l.34.515.367-.261.367-.261-.35-.578c-.192-.317-.379-.576-.415-.574-.036.001-.197.094-.357.207m13.095 3.619-.443.457.325.325.324.324.516-.528.515-.529-.325-.25c-.179-.138-.357-.252-.397-.253-.04-.002-.271.203-.515.454m-10.4 0-.311.331.481.481.481.481.327-.327.327-.327-.497-.485-.497-.485-.311.331m7.123 2.895c-.266.194-.486.39-.488.436-.002.046.107.219.242.386l.245.302.535-.371c.605-.419.61-.43.333-.826-.252-.36-.275-.358-.867.073m-3.832.155-.285.353.587.413.587.414.246-.296c.327-.392.324-.409-.166-.777-.644-.483-.663-.485-.969-.107" fill-rule="evenodd"/></svg></div>
          <div class="block-label">Public Participation</div>
        </li>
        <li class="d-flex">
          <div class="block-icon"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 72 71" width="70"><path d="M32.460 0.359 C 23.710 0.851,16.089 2.665,10.165 5.664 C 5.145 8.206,2.021 11.299,1.080 14.661 C 0.836 15.531,0.834 15.733,0.839 35.264 L 0.845 54.989 1.208 55.860 C 2.807 59.701,6.736 63.332,12.060 65.889 C 19.072 69.256,28.059 70.842,39.000 70.643 C 44.645 70.540,48.059 70.114,52.630 68.942 C 55.370 68.239,57.365 67.508,59.820 66.307 C 62.888 64.805,64.917 63.403,67.000 61.346 C 68.909 59.460,70.215 57.534,70.884 55.620 L 71.220 54.660 71.220 35.040 L 71.220 15.420 70.939 14.524 C 70.441 12.939,69.748 11.738,68.566 10.414 C 63.871 5.152,53.809 1.407,41.880 0.482 C 39.595 0.304,34.591 0.239,32.460 0.359 M41.280 1.440 C 56.493 2.556,68.218 8.092,70.024 15.010 C 70.328 16.173,70.220 18.146,69.792 19.259 C 69.269 20.617,68.457 21.797,67.147 23.102 C 64.645 25.595,61.231 27.524,56.400 29.177 C 42.341 33.988,22.878 33.076,10.745 27.039 C 5.021 24.191,1.810 20.506,1.802 16.776 C 1.797 14.657,2.837 12.498,4.796 10.560 C 9.664 5.744,19.590 2.290,30.960 1.455 C 32.943 1.310,39.377 1.300,41.280 1.440 M2.414 21.655 C 7.882 29.849,26.484 34.798,44.340 32.810 C 49.494 32.236,54.531 31.046,58.620 29.436 C 63.928 27.345,67.924 24.503,69.778 21.499 C 70.029 21.093,70.252 20.760,70.274 20.760 C 70.295 20.760,70.313 28.273,70.314 37.456 C 70.315 49.025,70.275 54.323,70.185 54.706 C 70.114 55.011,69.795 55.804,69.476 56.468 C 66.948 61.743,60.253 66.162,51.583 68.279 C 44.096 70.108,33.771 70.289,24.609 68.753 C 13.324 66.861,4.843 61.897,2.079 55.567 L 1.683 54.660 1.681 50.385 L 1.680 46.109 2.040 45.960 C 2.238 45.878,2.400 45.768,2.400 45.715 C 2.400 45.435,2.222 45.240,1.967 45.240 L 1.680 45.240 1.680 41.703 L 1.680 38.166 2.050 37.975 C 2.295 37.848,2.396 37.723,2.350 37.602 C 2.311 37.502,2.280 37.370,2.280 37.308 C 2.280 37.246,2.145 37.229,1.980 37.271 L 1.680 37.346 1.680 32.227 L 1.680 27.108 2.040 26.982 C 2.425 26.848,2.433 26.834,2.329 26.448 C 2.278 26.258,2.191 26.210,1.971 26.252 L 1.680 26.308 1.680 23.454 C 1.680 21.884,1.702 20.622,1.728 20.650 C 1.754 20.677,2.063 21.130,2.414 21.655 M68.737 28.980 L 68.413 29.513 68.755 29.757 C 68.943 29.890,69.127 30.000,69.163 30.000 C 69.237 30.000,69.840 29.004,69.840 28.883 C 69.840 28.816,69.192 28.434,69.096 28.444 C 69.076 28.446,68.915 28.687,68.737 28.980 M3.496 29.765 L 3.212 30.001 3.654 30.541 C 3.897 30.837,4.137 31.080,4.187 31.080 C 4.237 31.080,4.402 30.949,4.553 30.788 L 4.827 30.496 4.423 30.010 C 3.964 29.457,3.889 29.437,3.496 29.765 M66.058 32.162 L 65.588 32.643 65.915 32.969 L 66.241 33.296 66.723 32.813 L 67.206 32.331 66.867 32.006 L 66.528 31.681 66.058 32.162 M6.758 33.077 C 6.551 33.392,6.553 33.395,7.025 33.795 C 7.601 34.282,7.712 34.292,7.984 33.877 L 8.195 33.555 7.728 33.159 C 7.160 32.679,7.026 32.668,6.758 33.077 M62.730 34.763 C 62.225 35.110,62.194 35.222,62.495 35.613 L 62.705 35.885 63.279 35.521 L 63.854 35.157 63.599 34.798 C 63.458 34.601,63.307 34.443,63.262 34.447 C 63.217 34.451,62.977 34.593,62.730 34.763 M10.637 35.556 C 10.430 35.916,10.430 35.936,10.641 36.095 C 10.762 36.185,11.054 36.359,11.291 36.482 L 11.722 36.706 11.926 36.278 C 12.039 36.043,12.114 35.836,12.095 35.820 C 12.076 35.803,11.788 35.652,11.456 35.486 L 10.852 35.182 10.637 35.556 M58.950 36.844 C 58.669 36.968,58.440 37.102,58.440 37.141 C 58.440 37.261,58.802 37.920,58.868 37.920 C 58.933 37.920,59.907 37.440,59.986 37.369 C 60.079 37.286,59.727 36.600,59.595 36.608 C 59.521 36.613,59.230 36.719,58.950 36.844 M14.788 37.582 C 14.709 37.792,14.657 37.974,14.672 37.986 C 14.687 37.998,15.005 38.120,15.378 38.258 L 16.057 38.508 16.128 38.225 C 16.167 38.070,16.230 37.863,16.267 37.765 C 16.316 37.637,16.177 37.534,15.766 37.394 C 15.000 37.133,14.955 37.142,14.788 37.582 M55.080 38.366 C 54.783 38.469,54.521 38.569,54.498 38.588 C 54.475 38.608,54.519 38.813,54.595 39.044 L 54.734 39.465 55.237 39.290 C 55.514 39.194,55.803 39.093,55.881 39.065 C 55.987 39.027,55.989 38.908,55.891 38.587 C 55.819 38.352,55.728 38.164,55.690 38.169 C 55.651 38.175,55.377 38.263,55.080 38.366 M19.205 38.977 C 19.140 39.213,19.099 39.418,19.113 39.432 C 19.128 39.446,19.446 39.537,19.819 39.635 L 20.498 39.811 20.614 39.357 L 20.729 38.902 20.026 38.725 L 19.324 38.548 19.205 38.977 M50.865 39.504 L 50.310 39.621 50.404 40.040 C 50.456 40.270,50.517 40.476,50.540 40.496 C 50.562 40.517,50.865 40.475,51.214 40.402 C 51.839 40.273,51.847 40.266,51.770 39.905 C 51.678 39.477,51.617 39.355,51.503 39.374 C 51.457 39.382,51.170 39.441,50.865 39.504 M68.891 39.750 C 68.799 39.898,68.649 40.135,68.557 40.275 C 68.405 40.511,68.423 40.551,68.783 40.779 L 69.174 41.027 69.531 40.478 L 69.888 39.929 69.611 39.705 C 69.249 39.412,69.094 39.421,68.891 39.750 M23.716 39.971 C 23.672 40.188,23.678 40.403,23.729 40.450 C 23.779 40.497,24.098 40.572,24.438 40.617 L 25.057 40.699 25.141 40.315 C 25.230 39.912,25.093 39.725,24.705 39.722 C 24.598 39.721,24.349 39.688,24.152 39.648 C 23.824 39.583,23.788 39.609,23.716 39.971 M46.401 40.284 C 46.158 40.322,46.081 40.390,46.131 40.519 C 46.169 40.618,46.200 40.829,46.200 40.987 C 46.200 41.244,46.241 41.267,46.590 41.209 C 47.550 41.049,47.537 41.057,47.497 40.646 C 47.465 40.309,47.414 40.258,47.100 40.245 C 46.902 40.237,46.587 40.255,46.401 40.284 M28.288 40.710 C 28.255 40.925,28.247 41.121,28.270 41.146 C 28.293 41.171,28.624 41.198,29.006 41.206 C 29.686 41.220,29.701 41.213,29.740 40.873 C 29.789 40.440,29.614 40.324,28.904 40.322 C 28.368 40.320,28.345 40.334,28.288 40.710 M3.548 40.723 L 3.195 41.005 3.650 41.560 C 4.123 42.137,4.296 42.163,4.671 41.711 C 4.798 41.558,4.749 41.438,4.377 40.984 C 4.132 40.685,3.924 40.440,3.916 40.441 C 3.907 40.441,3.741 40.568,3.548 40.723 M32.880 41.086 C 32.880 41.537,33.056 41.635,33.870 41.638 C 34.315 41.640,34.320 41.635,34.320 41.160 L 34.320 40.680 33.600 40.680 L 32.880 40.680 32.880 41.086 M41.880 41.160 C 41.880 41.686,41.914 41.701,42.750 41.563 C 43.166 41.494,43.200 41.458,43.200 41.084 L 43.200 40.680 42.540 40.680 L 41.880 40.680 41.880 41.160 M37.560 41.280 L 37.560 41.760 38.220 41.760 L 38.880 41.760 38.880 41.280 L 38.880 40.800 38.220 40.800 L 37.560 40.800 37.560 41.280 M66.076 43.184 L 65.623 43.647 65.904 43.974 L 66.186 44.301 66.702 43.840 L 67.219 43.380 66.874 43.050 L 66.528 42.721 66.076 43.184 M6.750 44.036 L 6.479 44.379 7.081 44.821 L 7.683 45.263 7.918 44.981 C 8.047 44.827,8.152 44.646,8.151 44.580 C 8.151 44.478,7.156 43.667,7.055 43.687 C 7.036 43.690,6.898 43.848,6.750 44.036 M62.751 45.767 L 62.203 46.140 62.432 46.530 C 62.658 46.914,62.668 46.917,62.989 46.727 C 63.169 46.621,63.429 46.446,63.568 46.337 L 63.821 46.140 63.560 45.767 L 63.299 45.393 62.751 45.767 M10.646 46.549 C 10.533 46.740,10.440 46.928,10.440 46.966 C 10.440 47.033,11.569 47.640,11.693 47.640 C 11.768 47.640,12.153 46.909,12.099 46.870 C 11.969 46.778,10.930 46.200,10.895 46.200 C 10.871 46.200,10.759 46.357,10.646 46.549 M68.771 47.962 L 68.415 48.533 68.738 48.746 C 68.915 48.863,69.093 48.959,69.134 48.959 C 69.224 48.960,69.840 48.044,69.840 47.908 C 69.840 47.855,69.679 47.717,69.483 47.601 L 69.126 47.390 68.771 47.962 M59.006 47.830 C 58.690 47.994,58.459 48.173,58.492 48.227 C 58.525 48.281,58.608 48.470,58.675 48.646 L 58.796 48.966 59.398 48.661 C 59.729 48.493,60.000 48.327,60.000 48.292 C 60.000 48.212,59.644 47.518,59.607 47.526 C 59.592 47.529,59.322 47.666,59.006 47.830 M14.949 48.225 C 14.915 48.280,14.833 48.468,14.767 48.642 C 14.655 48.936,14.678 48.973,15.086 49.143 C 15.944 49.502,16.037 49.495,16.186 49.070 C 16.260 48.856,16.300 48.660,16.274 48.634 C 16.129 48.489,15.001 48.141,14.949 48.225 M3.555 48.730 L 3.237 48.979 3.475 49.300 C 3.606 49.476,3.809 49.739,3.927 49.883 L 4.140 50.147 4.481 49.850 L 4.822 49.552 4.421 49.020 C 4.200 48.727,3.987 48.486,3.946 48.484 C 3.906 48.482,3.730 48.592,3.555 48.730 M54.980 49.403 C 54.506 49.570,54.467 49.614,54.539 49.903 C 54.661 50.399,54.775 50.441,55.416 50.228 L 56.014 50.029 55.887 49.615 C 55.745 49.152,55.712 49.144,54.980 49.403 M19.212 49.938 C 19.137 50.151,19.118 50.361,19.168 50.405 C 19.307 50.526,20.398 50.802,20.467 50.733 C 20.500 50.700,20.576 50.504,20.635 50.298 C 20.739 49.933,20.730 49.921,20.241 49.795 C 19.965 49.724,19.651 49.640,19.543 49.609 C 19.405 49.569,19.306 49.667,19.212 49.938 M50.750 50.559 C 50.337 50.694,50.324 50.717,50.423 51.090 C 50.537 51.518,50.669 51.554,51.391 51.353 C 51.801 51.239,51.835 51.199,51.764 50.904 C 51.627 50.330,51.540 50.301,50.750 50.559 M23.715 50.989 C 23.678 51.219,23.663 51.423,23.683 51.443 C 23.735 51.495,24.994 51.727,25.029 51.691 C 25.045 51.674,25.094 51.468,25.138 51.234 L 25.218 50.809 24.500 50.690 L 23.783 50.571 23.715 50.989 M66.071 51.161 L 65.601 51.558 65.885 51.940 L 66.168 52.323 66.682 51.818 L 67.197 51.313 66.938 51.036 C 66.795 50.884,66.647 50.761,66.609 50.762 C 66.571 50.763,66.329 50.942,66.071 51.161 M46.758 51.253 C 46.438 51.303,46.161 51.361,46.142 51.382 C 46.124 51.403,46.135 51.595,46.168 51.810 C 46.232 52.230,46.381 52.278,47.145 52.125 C 47.475 52.059,47.520 52.002,47.520 51.652 C 47.520 51.433,47.480 51.234,47.430 51.208 C 47.380 51.183,47.078 51.203,46.758 51.253 M28.281 51.674 C 28.240 51.923,28.219 52.139,28.234 52.154 C 28.249 52.169,28.585 52.199,28.981 52.221 L 29.700 52.260 29.737 51.810 C 29.774 51.362,29.772 51.360,29.317 51.358 C 29.066 51.357,28.746 51.326,28.607 51.289 C 28.391 51.231,28.344 51.286,28.281 51.674 M32.880 52.067 L 32.880 52.560 33.410 52.560 C 33.702 52.560,34.026 52.593,34.130 52.633 C 34.284 52.692,34.320 52.613,34.320 52.213 L 34.320 51.720 33.790 51.720 C 33.498 51.720,33.174 51.687,33.070 51.647 C 32.916 51.588,32.880 51.667,32.880 52.067 M42.270 51.687 C 41.915 51.731,41.880 51.772,41.880 52.148 L 41.880 52.560 42.573 52.560 L 43.266 52.560 43.221 52.080 C 43.171 51.564,43.191 51.572,42.270 51.687 M6.752 52.062 L 6.500 52.404 7.083 52.839 L 7.667 53.275 7.913 52.961 C 8.049 52.789,8.160 52.612,8.160 52.569 C 8.160 52.480,7.195 51.720,7.081 51.720 C 7.039 51.720,6.891 51.874,6.752 52.062 M37.560 52.260 L 37.560 52.680 38.220 52.680 L 38.880 52.680 38.880 52.260 L 38.880 51.840 38.220 51.840 L 37.560 51.840 37.560 52.260 M62.791 53.732 C 62.220 54.099,62.183 54.214,62.503 54.609 L 62.726 54.884 63.274 54.537 C 63.841 54.178,63.851 54.126,63.459 53.612 C 63.311 53.418,63.266 53.426,62.791 53.732 M10.614 54.611 C 10.509 54.815,10.440 54.998,10.461 55.017 C 10.483 55.036,10.775 55.189,11.111 55.358 L 11.723 55.665 11.919 55.253 L 12.115 54.842 11.522 54.541 C 11.195 54.375,10.901 54.240,10.867 54.240 C 10.834 54.240,10.720 54.407,10.614 54.611 M58.980 55.820 C 58.716 55.958,58.483 56.085,58.461 56.104 C 58.440 56.122,58.510 56.307,58.617 56.515 C 58.826 56.919,58.956 56.925,59.670 56.562 C 60.056 56.365,60.054 56.373,59.817 55.914 C 59.602 55.498,59.600 55.498,58.980 55.820 M14.795 56.569 L 14.669 56.978 15.325 57.229 C 15.686 57.367,15.998 57.480,16.019 57.480 C 16.100 57.480,16.314 56.727,16.258 56.637 C 16.204 56.550,15.176 56.160,14.999 56.160 C 14.956 56.160,14.864 56.344,14.795 56.569 M54.960 57.412 C 54.596 57.546,54.545 57.613,54.578 57.913 C 54.634 58.420,54.723 58.455,55.397 58.240 L 56.007 58.045 55.883 57.642 C 55.748 57.203,55.619 57.170,54.960 57.412 M19.211 57.979 C 19.138 58.188,19.101 58.381,19.127 58.407 C 19.154 58.434,19.462 58.531,19.813 58.623 C 20.489 58.802,20.634 58.743,20.638 58.290 C 20.639 58.175,20.654 58.045,20.670 58.003 C 20.700 57.927,19.747 57.605,19.482 57.602 C 19.406 57.601,19.284 57.771,19.211 57.979 M50.970 58.484 C 50.466 58.587,50.400 58.636,50.402 58.910 C 50.405 59.469,50.528 59.541,51.226 59.392 C 51.849 59.258,51.853 59.254,51.774 58.879 C 51.667 58.370,51.628 58.351,50.970 58.484 M23.706 58.989 C 23.661 59.228,23.642 59.439,23.662 59.458 C 23.683 59.476,24.006 59.542,24.379 59.605 L 25.058 59.720 25.129 59.365 C 25.237 58.827,25.236 58.827,24.690 58.742 C 24.409 58.698,24.092 58.638,23.984 58.608 C 23.838 58.567,23.767 58.663,23.706 58.989 M46.599 59.246 L 46.097 59.293 46.166 59.736 C 46.203 59.980,46.243 60.192,46.254 60.207 C 46.265 60.222,46.557 60.201,46.903 60.160 L 47.532 60.085 47.496 59.654 C 47.457 59.187,47.420 59.170,46.599 59.246 M28.286 59.670 C 28.253 59.885,28.260 60.096,28.303 60.141 C 28.345 60.186,28.677 60.237,29.040 60.256 L 29.700 60.290 29.736 59.862 C 29.772 59.437,29.769 59.434,29.209 59.357 C 28.370 59.242,28.352 59.248,28.286 59.670 M32.880 60.120 L 32.880 60.600 33.600 60.600 L 34.320 60.600 34.320 60.195 C 34.320 59.837,34.276 59.781,33.945 59.715 C 33.739 59.674,33.415 59.640,33.225 59.640 C 32.902 59.640,32.880 59.671,32.880 60.120 M41.960 59.720 C 41.916 59.764,41.880 59.980,41.880 60.200 L 41.880 60.600 42.540 60.600 L 43.200 60.600 43.200 60.120 L 43.200 59.640 42.620 59.640 C 42.301 59.640,42.004 59.676,41.960 59.720 M37.560 60.240 L 37.560 60.720 38.220 60.720 L 38.880 60.720 38.880 60.240 L 38.880 59.760 38.220 59.760 L 37.560 59.760 37.560 60.240 " stroke="none" fill-rule="evenodd"></path></svg></div>
          <div class="block-label">Budget Oversight</div>
        </li>
      </ul>`
      )
      .show();

    const renderData = {
      alpha2: this.alpha2,
      countries: this.countries,
      data: this.data,
      empty: this.alpha2 === "",
      main_website_url: util.ibpWebsiteUrl(this.alpha2, this.data.name),
      years: this.years,
    };
    this.$el.html(template_page(renderData));
    target.html(this.$el);
    // Set up nav
    const nav = this.$el.find(".country-nav-select");
    nav.chosen();
    nav.val(this.alpha2).trigger("chosen:updated");
    nav.bind("change", this._onNavChange);
    this._setupYears();
  }

  // Private methods

  _setupYears() {
    const badges = {
      years: this.years,
      groupings0: _EXPLORER_DATASET.forYear(this.year).groupings.slice(0, 1),
      calc_year: this.calc_year,
    };
    $("#profile-mode")
      .empty()
      .append($(template_calculator_badges(badges)));
    this.data = this.lookup(this.alpha2);
    let collapsed = false;
    if ($("#accordion2 .accordion-body").hasClass("in")) {
      collapsed = true;
    }
    reportGenerator.update(this.year, collapsed);

    $("#profile-reset").click(this._onClickReset);
    $("#print-answered").click(this._onClickPrint);
    $("#print-table").click(this._onClickPrint);
    $(".explanation").show();
    $(".calculator-group-toggler").click(this._clickCalculatorGroupToggle);
  }

  _repaint(dataset = reportGenerator.dataset, questionSet = reportGenerator.questionSet) {
    let score;
    const percentageData = {
      percentages: [this._getPercentages(this.data.alpha2, this.data[`db_${this.year}`], this.year, questionSet)],
    };
    $(".percentages")
      .empty()
      .append($(template_profile_percentages(percentageData)));
    $(".percentbar").tooltip({
      placement: "right",
      delay: 50,
      animation: true,
      calc_year: this.calc_year,
    });
    const detailsData = this._getDetails(this.data, questionSet);
    $(".future").show();
    $(".details").html(template_calculator_details_future(detailsData));
    $(".letters.multi .letter[data-score]").bind("click", this._onClickAnswer);
    _.forEach($(".question-row"), (x) => {
      x = $(x);
      const qnum = x.attr("data-question-number");
      score = this.db[qnum];
      x.find('.letter[data-score="' + score + '"]')
        .removeClass("inactive")
        .addClass("active");
    });
    // Add question number hover effect
    this.$el.find("tr.question-row").mouseover(this._onHoverQuestion);
    this.$el.find("tr.question-row:first").mouseover();
    // Fill out scores
    const renderScore = function (year, scoreToRender) {
      if (scoreToRender !== undefined) {
        $(".scores .year-" + year).css("opacity", "1.0");
        $(".scores .year-" + year + " .bottom").text("Score: " + scoreToRender);
      } else {
        $(".scores .year-" + year).css("opacity", "0.2");
        return $(".scores .year-" + year + " .bottom").text("-");
      }
    };
    renderScore(this.year, percentageData.percentages[0].score);
    this._repaintFutureScore();
  }

  _clickCalculatorGroupToggle(e) {
    e.preventDefault();

    const el = $(e.delegateTarget);
    const groupId = el.attr("data-group-id");
    const reportGeneratorGroupBtn = $(`#group-${groupId}`);

    $(".group-toggler").removeClass("active");

    reportGeneratorGroupBtn.click();
  }

  _onHoverQuestion(e) {
    const target = $(e.delegateTarget);
    const datasetQuestion = _EXPLORER_DATASET.forYear(_EXPLORER_DATASET.THIS_YEAR).question;
    const number = target.attr("data-question-number");
    const t3q = {
      // t3 questions
      "PBS-2": 143,
      "EBP-2": 144,
      "EB-2": 145,
      "IYR-2": 146,
      "IYRs-2": 146,
      "MYR-2": 147,
      "YER-2": 148,
      "AR-2": 149,
    };
    let nb;
    let q;
    if (_.has(t3q, number)) {
      nb = t3q[number];
      q = datasetQuestion[nb];
    } else {
      q = datasetQuestion[number];
    }
    const qbox = $(".question-box");
    qbox.html(template_question_text(q));
    const top = target.position().top - 21;
    const maxTop = $(".details").height() - qbox.height() - 21;
    qbox.css({
      left: $(".details table").width(),
      top: Math.max(0, Math.min(top, maxTop)),
    });
    $("tr.question-row").removeClass("hover");
    target.addClass("hover");
  }

  _onNavChange(e) {
    const value = $(e.delegateTarget).val();
    if (value.length === 0) {
      window.location = "#calculator";
    } else {
      assert(value.length === 2, "Invalid country code: " + value);
      window.location = "#calculator/" + value;
    }
  }

  _getQuestionsForYear(year) {
    return _EXPLORER_DATASET.forYear(year).question;
  }

  _isThreeLetterAnswer(questionItem) {
    /*
    Most questions can be answered a, b, c, d, or e. Some, however are only a,
    b, or c. This returns a boolean to determine if the passed questionItem is
    one of these three letter answers.
    */
    return _.isNull(questionItem.d);
  }

  _numberToLetter(dataset, questionItem) {
    /*
    The given letters in the source data aren't always there. 'q102l' does not
    exist while 'q102' does. Therefore it is safer to use this technique to
    extract a letter...
    */
    const questionNumber = questionItem.number;
    const fiveLetterMapping = {
      "-1": "e",
      0: "d",
      33: "c",
      67: "b",
      100: "a",
    };
    const threeLetterMapping = {
      "-1": "c",
      0: "b",
      100: "a",
    };
    if (dataset === undefined) {
      return "";
    }
    let value;
    if (_.has(dataset, questionNumber)) {
      value = dataset[questionNumber];
      assert(value === -1 || value === 0 || value === 33 || value === 67 || value === 100, "Invalid value: " + value);
    } else {
      value = "-1";
    }
    if (this._isThreeLetterAnswer(questionItem)) {
      return threeLetterMapping[value];
    }
    return fiveLetterMapping[value];
  }

  _getPercentages(alpha2, data, year, questionSet) {
    const questions = this._getQuestionsForYear(year);
    if (data === undefined) {
      return {
        year: year,
        not_defined: true,
      };
    }
    const out = {
      total: questionSet.length,
      year: year,
      a: 0,
      b: 0,
      c: 0,
      d: 0,
      e: 0,
    };

    out.score = reportGenerator.calculateScore(data, questionSet);
    if (out.score < 0) {
      out.score = "N/A";
    } else {
      out.score = Math.round(out.score);
    }

    _.forEach(questionSet, (i) => {
      const questionItem = _.find(questions, (q) => String(q.number) === i);
      const letter = this._numberToLetter(data, questionItem);

      assert(letter === "a" || letter === "b" || letter === "c" || letter === "d" || letter === "e");
      out[letter]++;
    });
    assert(out.a + out.b + out.c + out.d + out.e === out.total, "Integrity problem in profile calculation");
    // Calculate bar widths. They are superimposed on top of each other, in
    // decreasing width.
    out.a_width = (out.a * 100) / out.total;
    out.b_width = ((out.a + out.b) * 100) / out.total;
    out.c_width = ((out.a + out.b + out.c) * 100) / out.total;
    out.d_width = ((out.a + out.b + out.c + out.d) * 100) / out.total;
    out.e_width = 100;
    return out;
  }

  _getDetails(data, questionSet) {
    const questions = this._getQuestionsForYear(this.year);
    const out = {
      questions: [],
      years: this.years,
      calc_year: this.calc_year,
    };
    _.forEach(questionSet, (x) => {
      const questionItem = _.find(questions, (q) => String(q.number) === x);
      const obj = {
        number: x,
        threeLetterAnswer: this._isThreeLetterAnswer(questionItem),
      };
      _.forEach(this.years, (y) => {
        const yearKey = y;
        const dbKey = "db_" + y;
        obj[yearKey] = this._numberToLetter(data[dbKey], questionItem);
      });
      out.questions.push(obj);
    });
    return out;
  }

  _onClickAnswer(e) {
    const el = $(e.delegateTarget);
    const tr = el.parents("tr:first");
    const qnum = tr.attr("data-question-number");
    const score = el.attr("data-score");
    tr.find(".multi .letter").removeClass("active").addClass("inactive");
    el.removeClass("inactive").addClass("active");
    this.db[qnum] = parseInt(score);
    this.params = _.extend(this.params, { [qnum]: score });
    this._repaintFutureScore();
    this._animationHackScale($(".year-box.year-future"));
    router.navigate(`#calculator/${this.alpha2}?${this._encodeParams(this.params)}`);
  }

  _onClickReset(e) {
    /*
    Resets the future results calculator back to displaying current results.
    */
    e.preventDefault();
    this.params = {};
    this.db = $.extend({}, this.data[`db_${this.year}`], this.params);
    router.navigate(`#calculator/${this.alpha2}?${this._encodeParams(this.params)}`);
    this._repaint();
  }

  _repaintFutureScore() {
    /*
    Update the future score for the calculator.
    */
    let score = reportGenerator.calculateScore(this.db, reportGenerator.questionSet);
    score = Math.round(score);
    $(".scores .year-future .bottom").text("Score: " + score);
  }

  _animationHackScale(element, scale = 1.3, time = 340) {
    /*
    Hacky function to make an element pulse to a new scale and back again.
    Follows a SIN wave. Looks like a heartbeat. Overwrites the font-size
    property. Hence hacky.
    */
    element = $(element);
    element.css("font-size", 100);
    element.animate(
      {
        "font-size": 0,
      },
      {
        duration: time,
        easing: "linear",
        step: function (now, fx) {
          let _scale;
          let x;
          x = (now * Math.PI) / 100;
          x = 1 + Math.sin(x) * (scale - 1);
          _scale = "scale(" + x + "," + x + ")";
          return element.css({
            "-moz-transform": _scale,
            "-o-transform": _scale,
            "-ms-transform": _scale,
            "-webkit-transform": _scale,
            transform: _scale,
          });
        },
      }
    );
  }
}

export default CalculatorPage;
